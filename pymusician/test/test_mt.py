import unittest
import pymusician as pm

class TestNoteClass(unittest.TestCase):

    def test_A4(self):
        self.assertEqual(pm.A4,440)
    
    def test_set_A4(self):
        pm.A4 = 442
        self.assertEqual(pm.A4,442)
        self.assertAlmostEqual(pm.Note("A",5).frequency,884)

    def test_natural_note(self):
        self.assertEqual(pm.Note("A").name,"A")
        self.assertEqual(pm.Note("b").name,"B")
        self.assertEqual(pm.Note("B ").name,"B")
        self.assertEqual(pm.Note("B").name,"B")
        self.assertEqual(pm.Note(" c").name,"C")
        self.assertEqual(pm.Note("C").name,"C")
        self.assertEqual(pm.Note("D").name,"D")
        self.assertEqual(pm.Note("E").name,"E")
        self.assertEqual(pm.Note("F").name,"F")
        self.assertEqual(pm.Note("G").name,"G")
    
        with self.assertRaises(ValueError):
            pm.Note('AA')
        with self.assertRaises(ValueError):
            pm.Note('H')
    
    def test_accidentals(self):
        pm.Note("A#")
        pm.Note("A##")
        pm.Note("Ab")
        pm.Note("Abb")
        pm.Note("B#")
        pm.Note("B##")
        pm.Note("Bb")
        pm.Note("Bbb")
        pm.Note("A#")
        pm.Note("A#")
        pm.Note("A#")
        pm.Note("A#")
        pm.Note("A#")
        pm.Note("A#")
        pm.Note("A#")
        pm.Note("A#")
        pm.Note("A#")
        pm.Note("A#")
        pm.Note("A#")
        pm.Note("Bbb")
        pm.Note("G##")
        pm.Note("Fb")
        with self.assertRaises(ValueError):
            pm.Note('Ab#')
        with self.assertRaises(ValueError):
            pm.Note('Eb#')
    
    def test_letter_value(self):
        self.assertEqual(pm.Note("C").letter,0)
        self.assertEqual(pm.Note("C#").letter,0)
        self.assertEqual(pm.Note("Cb").letter,0)
        self.assertEqual(pm.Note("Cbb").letter,0)
        self.assertEqual(pm.Note("C##").letter,0)
        self.assertEqual(pm.Note("D").letter,1)
        self.assertEqual(pm.Note("D#").letter,1)
        self.assertEqual(pm.Note("Db").letter,1)
        self.assertEqual(pm.Note("Dbb").letter,1)
        self.assertEqual(pm.Note("D##").letter,1)
        self.assertEqual(pm.Note("E").letter,2)
        self.assertEqual(pm.Note("E#").letter,2)
        self.assertEqual(pm.Note("Eb").letter,2)
        self.assertEqual(pm.Note("Ebb").letter,2)
        self.assertEqual(pm.Note("E##").letter,2)
        self.assertEqual(pm.Note("F").letter,3)
        self.assertEqual(pm.Note("F#").letter,3)
        self.assertEqual(pm.Note("Fb").letter,3)
        self.assertEqual(pm.Note("Fbb").letter,3)
        self.assertEqual(pm.Note("F##").letter,3)
        self.assertEqual(pm.Note("G").letter,4)
        self.assertEqual(pm.Note("G#").letter,4)
        self.assertEqual(pm.Note("Gb").letter,4)
        self.assertEqual(pm.Note("Gbb").letter,4)
        self.assertEqual(pm.Note("G##").letter,4)
        self.assertEqual(pm.Note("A").letter,5)
        self.assertEqual(pm.Note("A#").letter,5)
        self.assertEqual(pm.Note("Ab").letter,5)
        self.assertEqual(pm.Note("Abb").letter,5)
        self.assertEqual(pm.Note("A##").letter,5)
        self.assertEqual(pm.Note("B").letter,6)
        self.assertEqual(pm.Note("B#").letter,6)
        self.assertEqual(pm.Note("Bb").letter,6)
        self.assertEqual(pm.Note("Bbb").letter,6)
        self.assertEqual(pm.Note("B##").letter,6)
    
    def test_pitch_value(self):
        self.assertEqual(pm.Note("C").pitch,0)
        self.assertEqual(pm.Note("C#").pitch,1)
        self.assertEqual(pm.Note("Cb").pitch,11)
        self.assertEqual(pm.Note("Cbb").pitch,10)
        self.assertEqual(pm.Note("C##").pitch,2)
        self.assertEqual(pm.Note("D").pitch,2)
        self.assertEqual(pm.Note("D#").pitch,3)
        self.assertEqual(pm.Note("Db").pitch,1)
        self.assertEqual(pm.Note("Dbb").pitch,0)
        self.assertEqual(pm.Note("D##").pitch,4)
        self.assertEqual(pm.Note("E").pitch,4)
        self.assertEqual(pm.Note("E#").pitch,5)
        self.assertEqual(pm.Note("Eb").pitch,3)
        self.assertEqual(pm.Note("Ebb").pitch,2)
        self.assertEqual(pm.Note("E##").pitch,6)
        self.assertEqual(pm.Note("F").pitch,5)
        self.assertEqual(pm.Note("F#").pitch,6)
        self.assertEqual(pm.Note("Fb").pitch,4)
        self.assertEqual(pm.Note("Fbb").pitch,3)
        self.assertEqual(pm.Note("F##").pitch,7)
        self.assertEqual(pm.Note("G").pitch,7)
        self.assertEqual(pm.Note("G#").pitch,8)
        self.assertEqual(pm.Note("Gb").pitch,6)
        self.assertEqual(pm.Note("Gbb").pitch,5)
        self.assertEqual(pm.Note("G##").pitch,9)
        self.assertEqual(pm.Note("A").pitch,9)
        self.assertEqual(pm.Note("A#").pitch,10)
        self.assertEqual(pm.Note("Ab").pitch,8)
        self.assertEqual(pm.Note("Abb").pitch,7)
        self.assertEqual(pm.Note("A##").pitch,11)
        self.assertEqual(pm.Note("B").pitch,11)
        self.assertEqual(pm.Note("B#").pitch,0)
        self.assertEqual(pm.Note("Bb").pitch,10)
        self.assertEqual(pm.Note("Bbb").pitch,9)
        self.assertEqual(pm.Note("B##").pitch,1)
    
    def test_octave(self):
        self.assertEqual(pm.Note("C").octave, None)
        self.assertEqual(pm.Note("C",4).octave, 4)
        _note = pm.Note("F")
        _note.octave = 0
        self.assertEqual(_note.octave, 0)
        with self.assertRaises(ValueError):
            pm.Note("C",1.1)
        with self.assertRaises(ValueError):
            pm.Note("C","C")
    
    def test_rhythm_set(self):
        pm.Note("C",4,"0t")
        dot_quarter = pm.Note("D",5,"3.")
        sextuplet = pm.Note("E",2,"5t")
        crazy = pm.Note("Fbbb",-10,"7..t")
        crazy.rhythm = 0
        crazy.rhythm = "3.t"
        with self.assertRaises(ValueError):
            pm.Note("C",1,"4tt")
        with self.assertRaises(ValueError):
            pm.Note("C",1,"11")
        with self.assertRaises(ValueError):
            pm.Note("C",1,"t")
        with self.assertRaises(ValueError):
            pm.Note("C",1,"0t.")
        with self.assertRaises(ValueError):
            pm.Note("C",1,".")
    
    def test_rhythm_val(self):
        pm.Note("C",4,"0t").rhythm

        double_whole = pm.Note("C",2,"0")
        self.assertEqual(double_whole.rhythm.value,1024)

        five_twelth = pm.Note("C",3,"10")
        self.assertEqual(five_twelth.rhythm.value,1)

        dot_quarter = pm.Note("D",5,"3.")
        self.assertEqual(dot_quarter.rhythm.value,192)

        trip_quarter = pm.Note("E",2,"3t")
        self.assertAlmostEqual(trip_quarter.rhythm.value,85.3333333333333)

        self.assertEqual(pm.Note("A",None,"0").rhythm.value,1024)
        self.assertEqual(pm.Note("A",None,"1").rhythm.value,512)
        self.assertEqual(pm.Note("A",None,"2").rhythm.value,256)
        self.assertEqual(pm.Note("A",None,"3").rhythm.value,128)
        self.assertEqual(pm.Note("A",None,"4").rhythm.value,64)
        self.assertEqual(pm.Note("A",None,"5").rhythm.value,32)
        self.assertEqual(pm.Note("A",None,"6").rhythm.value,16)
        self.assertEqual(pm.Note("A",None,"7").rhythm.value,8)
        self.assertEqual(pm.Note("A",None,"8").rhythm.value,4)
        self.assertEqual(pm.Note("A",None,"9").rhythm.value,2)
        self.assertEqual(pm.Note("A",None,"10").rhythm.value,1)

        self.assertEqual(pm.Note("A",None,"0.").rhythm.value,1536)
        self.assertEqual(pm.Note("A",None,"10.").rhythm.value,1.5)
        self.assertAlmostEqual(pm.Note("A",None,"10t").rhythm.value,0.6666666666666)
    
    def test_pitch_offset(self):
        note_As = pm.Note("A#")
        note_C = pm.Note("C")
        note_Gb = pm.Note("Gb")
        note_G = pm.Note("G")
        note_Ess = pm.Note("E##")
        note_Bbb = pm.Note("Bbb")
        note_Dss = pm.Note("D##")
        self.assertEqual(note_As.pitch_offset,1)
        self.assertEqual(note_C.pitch_offset,0)
        self.assertEqual(note_Gb.pitch_offset,-1)
        self.assertEqual(note_G.pitch_offset,0)
        self.assertEqual(note_Ess.pitch_offset,2)
        self.assertEqual(note_Bbb.pitch_offset,-2)
        self.assertEqual(note_Dss.pitch_offset,2)

    def test_hard_pitch(self):
        C0 = pm.Note("C",0)
        C1 = pm.Note("C",1)
        Cn1 = pm.Note("C",-1)
        C4 = pm.Note("C",4)
        B3 = pm.Note("B",3)
        B4 = pm.Note("B",4)
        Db4 = pm.Note("Db",4)
        A4 = pm.Note("A",4)
        self.assertEqual(C0.hard_pitch,0)
        self.assertEqual(C1.hard_pitch,12)
        self.assertEqual(Cn1.hard_pitch,-12)
        self.assertEqual(C4.hard_pitch,48)
        self.assertEqual(B3.hard_pitch,47)
        self.assertEqual(B4.hard_pitch,59)
        self.assertEqual(Db4.hard_pitch,49)
        self.assertEqual(A4.hard_pitch,57)
    
    def test_frequency(self):
        A4 = pm.Note("A",4)
        A3 = pm.Note("A",3)
        A5 = pm.Note("A",5)
        C4 = pm.Note("C",4)
        B3 = pm.Note("B",3)
        B4 = pm.Note("B",4)
        Db4 = pm.Note("Db",4)
        self.assertEqual(A4.frequency,440)
        self.assertEqual(A3.frequency,220)
        self.assertEqual(A5.frequency,880)
        self.assertAlmostEqual(C4.frequency,261.6,1)
        self.assertAlmostEqual(B3.frequency,246.9,1)
        self.assertAlmostEqual(B4.frequency,493.9,1)
        self.assertAlmostEqual(Db4.frequency,277.2,1)

    def test_from_values(self):
        C = pm.Note.from_values(0,0)
        A = pm.Note.from_values(5,9)
        Bs = pm.Note.from_values(6,0)
        Fb = pm.Note.from_values(3,4)
        Gbb = pm.Note.from_values(4,5)
        Asss = pm.Note.from_values(5,0)
        self.assertEqual(C.name,"C")
        self.assertEqual(A.name,"A")
        self.assertEqual(Bs.name,"B#")
        self.assertEqual(Fb.name,"Fb")
        self.assertEqual(Gbb.name,"Gbb")
        self.assertEqual(Asss.name,"A###")

        self.assertEqual(pm.Note.from_values(0,1).name,"C#")
        self.assertEqual(pm.Note.from_values(0,2).name,"C##")
        self.assertEqual(pm.Note.from_values(0,11).name,"Cb")
        self.assertEqual(pm.Note.from_values(0,10).name,"Cbb")
        self.assertEqual(pm.Note.from_values(1,2).name,"D")
        self.assertEqual(pm.Note.from_values(1,3).name,"D#")
        self.assertEqual(pm.Note.from_values(1,4).name,"D##")
        self.assertEqual(pm.Note.from_values(1,1).name,"Db")
        self.assertEqual(pm.Note.from_values(1,0).name,"Dbb")
        self.assertEqual(pm.Note.from_values(2,4).name,"E")
        self.assertEqual(pm.Note.from_values(2,5).name,"E#")
        self.assertEqual(pm.Note.from_values(2,6).name,"E##")
        self.assertEqual(pm.Note.from_values(2,3).name,"Eb")
        self.assertEqual(pm.Note.from_values(2,2).name,"Ebb")
        self.assertEqual(pm.Note.from_values(3,5).name,"F")
        self.assertEqual(pm.Note.from_values(3,6).name,"F#")
        self.assertEqual(pm.Note.from_values(3,7).name,"F##")
        self.assertEqual(pm.Note.from_values(3,4).name,"Fb")
        self.assertEqual(pm.Note.from_values(3,3).name,"Fbb")
        self.assertEqual(pm.Note.from_values(4,7).name,"G")
        self.assertEqual(pm.Note.from_values(4,8).name,"G#")
        self.assertEqual(pm.Note.from_values(4,9).name,"G##")
        self.assertEqual(pm.Note.from_values(4,6).name,"Gb")
        self.assertEqual(pm.Note.from_values(4,5).name,"Gbb")
        self.assertEqual(pm.Note.from_values(5,9).name,"A")
        self.assertEqual(pm.Note.from_values(5,10).name,"A#")
        self.assertEqual(pm.Note.from_values(5,11).name,"A##")
        self.assertEqual(pm.Note.from_values(5,8).name,"Ab")
        self.assertEqual(pm.Note.from_values(5,7).name,"Abb")
        self.assertEqual(pm.Note.from_values(6,11).name,"B")
        self.assertEqual(pm.Note.from_values(6,0).name,"B#")
        self.assertEqual(pm.Note.from_values(6,1).name,"B##")
        self.assertEqual(pm.Note.from_values(6,10).name,"Bb")
        self.assertEqual(pm.Note.from_values(6,9).name,"Bbb")
        
    def test_enharmonic(self):
        C = pm.Note("C")
        Bs = pm.Note("B#")
        E = pm.Note("E")
        Fb = pm.Note("Fb")
        Dss = pm.Note("D##")
        As = pm.Note("A#")
        Bb = pm.Note("Bb")
        Abbb = pm.Note("Abbb")
        self.assertEqual(Bs.enharmonic().name,C.name)
        self.assertEqual(E.enharmonic(None,True).name,Fb.name)
        self.assertEqual(Fb.enharmonic().name,E.name)
        self.assertEqual(Dss.enharmonic().name,E.name)
        self.assertEqual(As.enharmonic().name,Bb.name)
        self.assertEqual(Bb.enharmonic().name,As.name)
        self.assertEqual(As.enharmonic("#").name,"A#")
        self.assertEqual(Bb.enharmonic("b").name,"Bb")
        self.assertEqual(Abbb.enharmonic("#").name,"F#")
        self.assertEqual(Abbb.enharmonic("b").name,"Gb")

    def test_from_hard_pitch(self):
        A4 = pm.Note.from_hard_pitch(57)
        C0 = pm.Note.from_hard_pitch(0)
        C4 = pm.Note.from_hard_pitch(48)
        B3 = pm.Note.from_hard_pitch(47)
        Db4 = pm.Note.from_hard_pitch(49,prefer="b")
        Cs4 = pm.Note.from_hard_pitch(49)
        self.assertEqual(A4.name,"A")
        self.assertEqual(C0.name,"C")
        self.assertEqual(C4.name,"C")
        self.assertEqual(B3.name,"B")
        self.assertEqual(Db4.name,"Db")
        self.assertEqual(Cs4.name,"C#")
        self.assertEqual(A4.octave,4)
        self.assertEqual(C0.octave,0)
        self.assertEqual(C4.octave,4)
        self.assertEqual(B3.octave,3)
        self.assertEqual(Db4.octave,4)
        self.assertEqual(Cs4.octave,4)

    def test_from_frequency(self):
        A4 = pm.Note.from_frequency(440)
        A3 = pm.Note.from_frequency(220)
        A5 = pm.Note.from_frequency(880)
        C4 = pm.Note.from_frequency(261.6)
        B3 = pm.Note.from_frequency(246.9)
        B4 = pm.Note.from_frequency(493.9)
        Db4 = pm.Note.from_frequency(277.2,"b")
        self.assertEqual(A4.name,"A")
        self.assertEqual(A3.name,"A")
        self.assertEqual(A5.name,"A")
        self.assertEqual(C4.name,"C")
        self.assertEqual(B3.name,"B")
        self.assertEqual(B4.name,"B")
        self.assertEqual(Db4.name,"Db")
        self.assertEqual(A4.octave,4)
        self.assertEqual(A3.octave,3)
        self.assertEqual(A5.octave,5)
        self.assertEqual(C4.octave,4)
        self.assertEqual(B3.octave,3)
        self.assertEqual(B4.octave,4)
        self.assertEqual(Db4.octave,4)
    
    def test_repr(self):
        self.assertEqual(repr(pm.Note("E")),'<Note E>')
        self.assertEqual(repr(pm.Note("A#",4,)),'<Note A#4>')
        self.assertEqual(repr(pm.Note("Gbb",3,"4")),'<Note Gbb3:4>')
        self.assertEqual(repr(pm.Note("F#",0,"3.t")),'<Note F#0:3.t>')
        self.assertEqual(repr(pm.Note("B#",3,"5.")),'<Note B#3:5.>')

class TestIntervalClass(unittest.TestCase):

    def test_init(self):

        maj2 = pm.Interval("M2")
        P12 = pm.Interval("P5",1)
        min9 = pm.Interval("m2",1)
        maj72oct = pm.Interval("M7",2)
        per4 = pm.Interval("p4")
        aug4 = pm.Interval("a4")
        dim4 = pm.Interval("d4")
        doubleaug4 = pm.Interval("a.4")
        doubledim5 = pm.Interval("d.4")
        tripletaug2 = pm.Interval("a..4")
        quadaug2 = pm.Interval("a...4")
    
    def test_flag_error(self):
        with self.assertRaises(ValueError):
            pm.Interval("T2")
        with self.assertRaises(ValueError):
            pm.Interval("M.2")
        with self.assertRaises(ValueError):
            pm.Interval("m")
        with self.assertRaises(ValueError):
            pm.Interval("p.4")
        with self.assertRaises(ValueError):
            pm.Interval("p2")
        with self.assertRaises(ValueError):
            pm.Interval("M5")

    def test_intvl_diff(self):
        self.assertEqual(pm.Interval("p1").diff,0)
        self.assertEqual(pm.Interval("m2").diff,1)
        self.assertEqual(pm.Interval("M2").diff,2)
        self.assertEqual(pm.Interval("m3").diff,3)
        self.assertEqual(pm.Interval("M3").diff,4)
        self.assertEqual(pm.Interval("P4").diff,5)
        self.assertEqual(pm.Interval("A4").diff,6)
        self.assertEqual(pm.Interval("D5").diff,6)
        self.assertEqual(pm.Interval("p5").diff,7)
        self.assertEqual(pm.Interval("m6").diff,8)
        self.assertEqual(pm.Interval("M6").diff,9)
        self.assertEqual(pm.Interval("D7").diff,9)
        self.assertEqual(pm.Interval("m7").diff,10)
        self.assertEqual(pm.Interval("M7").diff,11)
        self.assertEqual(pm.Interval("a1",1).diff,13)
        self.assertEqual(pm.Interval("p1",1).diff,12)
        self.assertEqual(pm.Interval("p1",2).diff,24)
        self.assertEqual(pm.Interval("M7",1).diff,23)

    def test_letter_diff(self):
        self.assertEqual(pm.Interval("p1").letter_diff,0)
        self.assertEqual(pm.Interval("m2").letter_diff,1)
        self.assertEqual(pm.Interval("M2").letter_diff,1)
        self.assertEqual(pm.Interval("m3").letter_diff,2)
        self.assertEqual(pm.Interval("M3").letter_diff,2)
        self.assertEqual(pm.Interval("P4").letter_diff,3)
        self.assertEqual(pm.Interval("A4").letter_diff,3)
        self.assertEqual(pm.Interval("D5").letter_diff,4)
        self.assertEqual(pm.Interval("p5").letter_diff,4)
        self.assertEqual(pm.Interval("m6").letter_diff,5)
        self.assertEqual(pm.Interval("M6").letter_diff,5)
        self.assertEqual(pm.Interval("D7").letter_diff,6)
        self.assertEqual(pm.Interval("m7").letter_diff,6)
        self.assertEqual(pm.Interval("M7").letter_diff,6)
        self.assertEqual(pm.Interval("a1",1).letter_diff,0)
        self.assertEqual(pm.Interval("p1",1).letter_diff,0)
        self.assertEqual(pm.Interval("p1",2).letter_diff,0)
        self.assertEqual(pm.Interval("M7",1).letter_diff,6)

    def test_intvl_name(self):
        intvl1 = pm.Interval("p1")
        intvl2 = pm.Interval("a1")
        intvl3 = pm.Interval("m2")
        intvl4 = pm.Interval("M2")
        intvl5 = pm.Interval("M3")
        intvl6 = pm.Interval("P4")
        intvl7 = pm.Interval("D5")
        intvl8 = pm.Interval("D5",1)
        intvl9 = pm.Interval("p1",2)
        intvl10 = pm.Interval("A5")
        intvl11 = pm.Interval("M7")
        intvl12 = pm.Interval("d7")
        intvl13 = pm.Interval("a3")
        intvl14 = pm.Interval("a..4")
        intvl15 = pm.Interval("d...5",2)
        intvl16 = pm.Interval("d.2")
        intvl17 = pm.Interval("m3",1)
        intvl18 = pm.Interval("m3",2)
        intvl19 = pm.Interval("M7",1)
        intvl20 = pm.Interval("M7",3)
        intvl21 = pm.Interval("p1",1)
        
        self.assertEqual(intvl1.name,"Perfect unison")
        self.assertEqual(intvl2.name,"Augmented unison")
        self.assertEqual(intvl3.name,"Minor 2nd")
        self.assertEqual(intvl4.name,"Major 2nd")
        self.assertEqual(intvl5.name,"Major 3rd")
        self.assertEqual(intvl6.name,"Perfect 4th")
        self.assertEqual(intvl7.name,"Diminished 5th")
        self.assertEqual(intvl8.name,"Diminished 12th")
        self.assertEqual(intvl9.name,"2 octaves")
        self.assertEqual(intvl10.name,"Augmented 5th")
        self.assertEqual(intvl11.name,"Major 7th")
        self.assertEqual(intvl12.name,"Diminished 7th")
        self.assertEqual(intvl13.name,"Augmented 3rd")
        self.assertEqual(intvl14.name,"Augmented(x3) 4th")
        self.assertEqual(intvl15.name,"Diminished(x4) 5th plus 2 octaves")
        self.assertEqual(intvl16.name,"Diminished(x2) 2nd")
        self.assertEqual(intvl17.name,"Minor 10th")
        self.assertEqual(intvl18.name,"Minor 3rd plus 2 octaves")
        self.assertEqual(intvl19.name,"Major 14th")
        self.assertEqual(intvl20.name,"Major 7th plus 3 octaves")
        self.assertEqual(intvl21.name,"Perfect octave")

    def test_intvl_from_notes(self):
        A = pm.Note("A")
        B = pm.Note("B")
        Bb = pm.Note("Bb")
        As = pm.Note("A#")
        G = pm.Note("G")
        Gb = pm.Note("Gb")
        E = pm.Note("E")
        Dbb = pm.Note("Dbb")
        Dss = pm.Note("D##")

        self.assertEqual(pm.Interval.from_notes(A,B).name,"Major 2nd")
        self.assertEqual(pm.Interval.from_notes(A,Bb).name,"Minor 2nd")
        self.assertEqual(pm.Interval.from_notes(A,As).name,"Augmented unison")
        self.assertEqual(pm.Interval.from_notes(G,A).name,"Major 2nd")
        self.assertEqual(pm.Interval.from_notes(Gb,B).name,"Augmented 3rd")
        self.assertEqual(pm.Interval.from_notes(Dss,Dbb).name,"Diminished(x4) unison")
        self.assertEqual(pm.Interval.from_notes(E,B).name,"Perfect 5th")
        self.assertEqual(pm.Interval.from_notes(B,E).name,"Perfect 4th")

        A4 = A
        A4.octave = 4
        A5 = pm.Note("A",5)
        A6 = pm.Note("A",6)
        B3 = B
        B3.octave = 3
        G2 = G
        G2.octave = 2
        Bb4 = Bb
        Bb4.octave = 4
        E5 = E
        E5.octave = 5
        Gb2 = Gb
        Gb2.octave = 2
        

        self.assertEqual(pm.Interval.from_notes(A4,Bb4).name,"Minor 2nd")
        self.assertEqual(pm.Interval.from_notes(A4,E5).name,"Perfect 5th")
        self.assertEqual(pm.Interval.from_notes(G2,B3).name,"Major 10th")
        self.assertEqual(pm.Interval.from_notes(E5,Bb4).name,"Augmented 4th")
        self.assertEqual(pm.Interval.from_notes(Bb4,E5).name,"Augmented 4th")
        self.assertEqual(pm.Interval.from_notes(Bb4,E5).name,"Augmented 4th")
        self.assertEqual(pm.Interval.from_notes(Bb4,E5).name,"Augmented 4th")
        self.assertEqual(pm.Interval.from_notes(A4,A5).name,"Perfect octave")
        self.assertEqual(pm.Interval.from_notes(A4,A6).name,"2 octaves")

    def test_note_method(self):
        A5 = pm.Note("A",5)
        B2 = pm.Note("B",2)
        Bb3 = pm.Note("Bb",3)
        As4 = pm.Note("A#",4)
        G5 = pm.Note("G",5)
        Gb2 = pm.Note("Gb",2)
        E6 = pm.Note("E",6)
        Dbb2 = pm.Note("Dbb",2)
        Dss3 = pm.Note("D##",3)

        intvl1 = pm.Interval("p1")
        intvl2 = pm.Interval("a1")
        intvl3 = pm.Interval("m2")
        intvl4 = pm.Interval("M2")
        intvl5 = pm.Interval("M3")
        intvl6 = pm.Interval("P4")
        intvl7 = pm.Interval("D5")
        intvl8 = pm.Interval("D5",1)
        intvl9 = pm.Interval("p1",2)
        intvl10 = pm.Interval("A5")
        intvl11 = pm.Interval("M7")
        intvl12 = pm.Interval("d7")
        intvl13 = pm.Interval("a3")
        intvl14 = pm.Interval("a..4")
        intvl15 = pm.Interval("d...5",2)
        intvl16 = pm.Interval("d.2")
        intvl17 = pm.Interval("m3",1)
        intvl18 = pm.Interval("m3",2)
        intvl19 = pm.Interval("M7",1)
        intvl20 = pm.Interval("M7",3)
        intvl21 = pm.Interval("p1",1)

        self.assertEqual((A5 + intvl1).name, "A")
        self.assertEqual((A5 + intvl2).name, "A#")
        self.assertEqual((B2 + intvl19).name, "A#")
        self.assertEqual((B2 + intvl19).octave, 4)
        self.assertEqual((E6 + intvl15).name, "Bbbbb")
        self.assertEqual((Dss3 + intvl16).name, "Eb")
        self.assertEqual((G5 + intvl20).name, "F#")
        self.assertEqual((G5 + intvl20).octave, 9)

        self.assertEqual((A5 - intvl1).name, "A")
        self.assertEqual((A5 - intvl2).name, "Ab")
        self.assertEqual((B2 - intvl19).name, "C")
        self.assertEqual((B2 - intvl19).octave, 1)
        self.assertEqual((E6 - intvl15).name, "A####")
        self.assertEqual((Dss3 - intvl16).name, "C#####")
        self.assertEqual((G5 - intvl20).name, "Ab")
        self.assertEqual((G5 - intvl20).octave, 1)

class TestModeClass(unittest.TestCase):

    def test_mode_init(self):

        pm.Mode("A","major")
        pm.Mode("B","minor")
        pm.Mode("C","major pentatonic")
        pm.Mode("D##","melodic minor")
        pm.Mode("Gb","locrian")
    
    def test_mode_spelling(self):

        Amaj = pm.Mode("A","major")
        self.assertEqual(Amaj.name,"A major")
        self.assertEqual(Amaj.spelling[0].name,"A")
        self.assertEqual(Amaj.spelling[1].name,"B")
        self.assertEqual(Amaj.spelling[2].name,"C#")
        self.assertEqual(Amaj.spelling[3].name,"D")
        self.assertEqual(Amaj.spelling[4].name,"E")
        self.assertEqual(Amaj.spelling[5].name,"F#")
        self.assertEqual(Amaj.spelling[6].name,"G#")

        Gmm = pm.Mode("G","melodic minor")
        self.assertEqual(Gmm.spelling[0].name,"G")
        self.assertEqual(Gmm.spelling[1].name,"A")
        self.assertEqual(Gmm.spelling[2].name,"Bb")
        self.assertEqual(Gmm.spelling[3].name,"C")
        self.assertEqual(Gmm.spelling[4].name,"D")
        self.assertEqual(Gmm.spelling[5].name,"E")
        self.assertEqual(Gmm.spelling[6].name,"F#")

        Ehm = pm.Mode("E","harmonic minor")
        self.assertEqual(Ehm.spelling[0].name,"E")
        self.assertEqual(Ehm.spelling[1].name,"F#")
        self.assertEqual(Ehm.spelling[2].name,"G")
        self.assertEqual(Ehm.spelling[3].name,"A")
        self.assertEqual(Ehm.spelling[4].name,"B")
        self.assertEqual(Ehm.spelling[5].name,"C")
        self.assertEqual(Ehm.spelling[6].name,"D#")

        Espent = pm.Mode("E#","major pentatonic")
        self.assertEqual(Espent.spelling[0].name,"E#")
        self.assertEqual(Espent.spelling[1].name,"F##")
        self.assertEqual(Espent.spelling[2].name,"G##")
        self.assertEqual(Espent.spelling[3].name,"B#")
        self.assertEqual(Espent.spelling[4].name,"C##")

        Blydom = pm.Mode("B","lydian dominant")
        self.assertEqual(Blydom.spelling[0].name,"B")
        self.assertEqual(Blydom.spelling[1].name,"C#")
        self.assertEqual(Blydom.spelling[2].name,"D#")
        self.assertEqual(Blydom.spelling[3].name,"E#")
        self.assertEqual(Blydom.spelling[4].name,"F#")
        self.assertEqual(Blydom.spelling[5].name,"G#")
        self.assertEqual(Blydom.spelling[6].name,"A")
        
        Caug = pm.Mode("C","augmented")
        self.assertEqual(Caug.spelling[0].name,"C")
        self.assertEqual(Caug.spelling[1].name,"D#")
        self.assertEqual(Caug.spelling[2].name,"E")
        self.assertEqual(Caug.spelling[3].name,"G")
        self.assertEqual(Caug.spelling[4].name,"G#")
        self.assertEqual(Caug.spelling[5].name,"B")

        Dsmin = pm.Mode("D#","minor")
        self.assertEqual(Dsmin.spelling[0].name,"D#")
        self.assertEqual(Dsmin.spelling[1].name,"E#")
        self.assertEqual(Dsmin.spelling[2].name,"F#")
        self.assertEqual(Dsmin.spelling[3].name,"G#")
        self.assertEqual(Dsmin.spelling[4].name,"A#")
        self.assertEqual(Dsmin.spelling[5].name,"B")
        self.assertEqual(Dsmin.spelling[6].name,"C#")

        Eloc = pm.Mode("E","locrian")
        self.assertEqual(Eloc.spelling[0].name,"E")
        self.assertEqual(Eloc.spelling[1].name,"F")
        self.assertEqual(Eloc.spelling[2].name,"G")
        self.assertEqual(Eloc.spelling[3].name,"A")
        self.assertEqual(Eloc.spelling[4].name,"Bb")
        self.assertEqual(Eloc.spelling[5].name,"C")
        self.assertEqual(Eloc.spelling[6].name,"D")
    
        Fbblues = pm.Mode("Fb","blues")
        self.assertEqual(Fbblues.spelling[0].name,"Fb")
        self.assertEqual(Fbblues.spelling[1].name,"Abb")
        self.assertEqual(Fbblues.spelling[2].name,"Bbb")
        self.assertEqual(Fbblues.spelling[3].name,"Bb")
        self.assertEqual(Fbblues.spelling[4].name,"Cb")
        self.assertEqual(Fbblues.spelling[5].name,"Ebb")

class TestChordClass(unittest.TestCase):

    def test_chord_init(self):
        pm.Chord("A")
        pm.Chord("Gbm7")
        pm.Chord("Gminor")
        pm.Chord("B min")
        pm.Chord("C minor")
        pm.Chord("G7")
        pm.Chord("Bmaj9")
        pm.Chord("Gb13")
        pm.Chord("Fmin(maj7)")
        pm.Chord("Db6/9")
        pm.Chord("Db(6/9)")
        pm.Chord("F#b13(b9)")
        pm.Chord("A+")

    def test_maj_chord(self):
        maj1 = pm.Chord("A")
        maj2 = pm.Chord("Gmaj")
        maj3 = pm.Chord("Bmajor")
        maj4 = pm.Chord("C maj")
        self.assertIn("M3",maj1.intervals)
        self.assertIn("P5",maj1.intervals)
        self.assertIn("M3",maj2.intervals)
        self.assertIn("P5",maj2.intervals)
        self.assertIn("M3",maj3.intervals)
        self.assertIn("P5",maj4.intervals)
        self.assertIn("M3",maj4.intervals)
        self.assertNotIn("M7",maj2.intervals)
        self.assertNotIn("M7",maj3.intervals)
        self.assertNotIn("M7",maj4.intervals)

    def test_min_chord(self):
        min1 = pm.Chord("E-")
        min2 = pm.Chord("Fmin")
        min3 = pm.Chord("Bbminor")
        min4 = pm.Chord("C# min")
        self.assertIn("m3",min1.intervals)
        self.assertIn("P5",min1.intervals)
        self.assertIn("m3",min2.intervals)
        self.assertIn("P5",min2.intervals)
        self.assertIn("m3",min3.intervals)
        self.assertIn("P5",min4.intervals)
        self.assertIn("m3",min4.intervals)
        self.assertNotIn("m7",min1.intervals)
        self.assertNotIn("m7",min2.intervals)
        self.assertNotIn("m7",min3.intervals)
        self.assertNotIn("m7",min4.intervals)

    def test_aug_chord(self):
        aug1 = pm.Chord("G+")
        aug2 = pm.Chord("F + ")
        aug3 = pm.Chord("Ab augmented")
        aug4 = pm.Chord("Daug")
        self.assertIn("M3",aug1.intervals)
        self.assertIn("A5",aug1.intervals)
        self.assertIn("M3",aug2.intervals)
        self.assertIn("A5",aug2.intervals)
        self.assertIn("M3",aug3.intervals)
        self.assertIn("A5",aug4.intervals)
        self.assertIn("M3",aug4.intervals)
        self.assertNotIn("P5",aug1.intervals)
        self.assertNotIn("P5",aug2.intervals)
        self.assertNotIn("P5",aug3.intervals)
        self.assertNotIn("P5",aug4.intervals)

    def test_dim_chord(self):
        dim1 = pm.Chord("Go")
        dim2 = pm.Chord("Fdim")
        dim3 = pm.Chord("Abdiminished")
        dim4 = pm.Chord("D°")
        self.assertIn("m3",dim1.intervals)
        self.assertIn("D5",dim1.intervals)
        self.assertIn("m3",dim2.intervals)
        self.assertIn("D5",dim2.intervals)
        self.assertIn("m3",dim3.intervals)
        self.assertIn("D5",dim4.intervals)
        self.assertIn("m3",dim4.intervals)
        self.assertNotIn("P5",dim1.intervals)
        self.assertNotIn("D7",dim1.intervals)
        self.assertNotIn("P5",dim2.intervals)
        self.assertNotIn("P5",dim3.intervals)
        self.assertNotIn("P5",dim4.intervals)

    def test_half_dim_chord(self):
        half_dim1 = pm.Chord("Ehalfdim")
        half_dim2 = pm.Chord("F half diminished")
        half_dim3 = pm.Chord("Bhalfdiminished")
        half_dim4 = pm.Chord("G##ø")
        self.assertIn("m3",half_dim1.intervals)
        self.assertIn("D5",half_dim1.intervals)
        self.assertIn("m7",half_dim1.intervals)
        self.assertIn("m3",half_dim2.intervals)
        self.assertIn("D5",half_dim2.intervals)
        self.assertIn("m7",half_dim2.intervals)
        self.assertIn("m3",half_dim3.intervals)
        self.assertIn("m7",half_dim3.intervals)
        self.assertIn("D5",half_dim4.intervals)
        self.assertIn("m3",half_dim4.intervals)
        self.assertIn("m7",half_dim4.intervals)
        self.assertNotIn("P5",half_dim1.intervals)
        self.assertNotIn("D7",half_dim1.intervals)
        self.assertNotIn("D7",half_dim2.intervals)
        self.assertNotIn("D7",half_dim3.intervals)
        self.assertNotIn("D7",half_dim4.intervals)

    def test_sus_chord(self):
        sus1 = pm.Chord("Esus4")
        sus2 = pm.Chord("Fsuspended")
        sus3 = pm.Chord("Bb sus")
        sus4 = pm.Chord("C# sus4")
        self.assertIn("P4",sus1.intervals)
        self.assertIn("P5",sus1.intervals)
        self.assertIn("P4",sus2.intervals)
        self.assertIn("P5",sus2.intervals)
        self.assertIn("P4",sus3.intervals)
        self.assertIn("P5",sus3.intervals)
        self.assertIn("P4",sus4.intervals)
        self.assertIn("P5",sus4.intervals)
        self.assertNotIn("M3",sus1.intervals)
        self.assertNotIn("M3",sus2.intervals)
        self.assertNotIn("M3",sus3.intervals)
        self.assertNotIn("M3",sus4.intervals)
        self.assertNotIn("M2",sus1.intervals)
        self.assertNotIn("M2",sus2.intervals)
        self.assertNotIn("M2",sus3.intervals)
        self.assertNotIn("M2",sus4.intervals)

    def test_sus_2_chord(self):
        sus1 = pm.Chord("Esus2")
        sus2 = pm.Chord("Fsuspended2")
        sus3 = pm.Chord("Bb suspended 2")
        sus4 = pm.Chord("C# sus 2")
        self.assertIn("M2",sus1.intervals)
        self.assertIn("P5",sus1.intervals)
        self.assertIn("M2",sus2.intervals)
        self.assertIn("P5",sus2.intervals)
        self.assertIn("M2",sus3.intervals)
        self.assertIn("P5",sus3.intervals)
        self.assertIn("M2",sus4.intervals)
        self.assertIn("P5",sus4.intervals)
        self.assertNotIn("M3",sus1.intervals)
        self.assertNotIn("M3",sus2.intervals)
        self.assertNotIn("M3",sus3.intervals)
        self.assertNotIn("M3",sus4.intervals)
        self.assertNotIn("P4",sus1.intervals)
        self.assertNotIn("P4",sus2.intervals)
        self.assertNotIn("P4",sus3.intervals)
        self.assertNotIn("P4",sus4.intervals)

    def test_power_chord(self):
        pow1 = pm.Chord("E5")
        pow2 = pm.Chord("F no 3rd")
        pow3 = pm.Chord("Bb(no3)")
        pow4 = pm.Chord("C#no3")
        self.assertIn("P5",pow1.intervals)
        self.assertIn("P5",pow2.intervals)
        self.assertIn("P5",pow3.intervals)
        self.assertIn("P5",pow4.intervals)
        self.assertNotIn("M3",pow1.intervals)
        self.assertNotIn("M3",pow2.intervals)
        self.assertNotIn("M3",pow3.intervals)
        self.assertNotIn("M3",pow4.intervals)

    def test_maj_7(self):
        chord1 = pm.Chord("Emaj7")
        chord2 = pm.Chord("Fmajor7")
        chord3 = pm.Chord("BbM7")
        chord4 = pm.Chord("Cmin(maj7)")
        chord5 = pm.Chord("CminorM7")
        self.assertIn("M3",chord1.intervals)
        self.assertIn("P5",chord1.intervals)
        self.assertIn("M7",chord1.intervals)
        self.assertIn("M3",chord2.intervals)
        self.assertIn("P5",chord2.intervals)
        self.assertIn("M7",chord2.intervals)
        self.assertIn("M3",chord3.intervals)
        self.assertIn("P5",chord3.intervals)
        self.assertIn("M7",chord3.intervals)
        self.assertIn("m3",chord4.intervals)
        self.assertIn("P5",chord4.intervals)
        self.assertIn("M7",chord4.intervals)
        self.assertIn("m3",chord5.intervals)
        self.assertIn("P5",chord5.intervals)
        self.assertIn("M7",chord5.intervals)
        self.assertNotIn("m3",chord1.intervals)
        self.assertNotIn("m7",chord1.intervals)
        self.assertNotIn("m3",chord2.intervals)
        self.assertNotIn("m7",chord2.intervals)
        self.assertNotIn("m3",chord3.intervals)
        self.assertNotIn("m7",chord3.intervals)
        self.assertNotIn("M3",chord4.intervals)
        self.assertNotIn("m7",chord4.intervals)
        self.assertNotIn("M3",chord5.intervals)
        self.assertNotIn("m7",chord5.intervals)

    def test_7(self):
        chord1 = pm.Chord("E7")
        chord2 = pm.Chord("Fmin7")
        chord3 = pm.Chord("Bbm7")
        chord4 = pm.Chord("Cmin7")
        chord5 = pm.Chord("Cminor7(b5)")
        self.assertIn("M3",chord1.intervals)
        self.assertIn("P5",chord1.intervals)
        self.assertIn("m7",chord1.intervals)
        self.assertIn("m3",chord2.intervals)
        self.assertIn("P5",chord2.intervals)
        self.assertIn("m7",chord2.intervals)
        self.assertIn("m3",chord3.intervals)
        self.assertIn("P5",chord3.intervals)
        self.assertIn("m7",chord3.intervals)
        self.assertIn("m3",chord4.intervals)
        self.assertIn("P5",chord4.intervals)
        self.assertIn("m7",chord4.intervals)
        self.assertIn("m3",chord5.intervals)
        self.assertIn("D5",chord5.intervals)
        self.assertIn("m7",chord5.intervals)
        self.assertNotIn("M7",chord1.intervals)
        self.assertNotIn("M7",chord2.intervals)
        self.assertNotIn("M7",chord3.intervals)
        self.assertNotIn("M7",chord4.intervals)
        self.assertNotIn("M7",chord5.intervals)
        self.assertNotIn("P5",chord5.intervals)
    
    def test_add_9(self):
        chord1 = pm.Chord("Eadd9")
        chord2 = pm.Chord("G#m(add2)")
        chord3 = pm.Chord("Ab-(add9)")
        chord4 = pm.Chord("C2")
        chord5 = pm.Chord("Amaj(add9)")
        self.assertIn("M3",chord1.intervals)
        self.assertIn("P5",chord1.intervals)
        self.assertIn("M2",chord1.intervals)
        self.assertIn("m3",chord2.intervals)
        self.assertIn("P5",chord2.intervals)
        self.assertIn("M2",chord2.intervals)
        self.assertIn("m3",chord3.intervals)
        self.assertIn("P5",chord3.intervals)
        self.assertIn("M2",chord3.intervals)
        self.assertIn("M3",chord4.intervals)
        self.assertIn("P5",chord4.intervals)
        self.assertIn("M2",chord4.intervals)
        self.assertIn("M3",chord5.intervals)
        self.assertIn("P5",chord5.intervals)
        self.assertIn("M2",chord5.intervals)
        self.assertNotIn("m7",chord1.intervals)
        self.assertNotIn("m7",chord2.intervals)
        self.assertNotIn("m7",chord3.intervals)
        self.assertNotIn("m7",chord4.intervals)
        self.assertNotIn("m7",chord5.intervals)
        self.assertNotIn("M7",chord5.intervals)
    
    def test_9_chord(self):
        chord1 = pm.Chord("E9")
        chord2 = pm.Chord("G#m9")
        chord3 = pm.Chord("Ab9")
        chord4 = pm.Chord("Cmaj9")
        chord5 = pm.Chord("Amaj9")
        chord6 = pm.Chord("Ebmin9(maj7)")
        self.assertIn("M3",chord1.intervals)
        self.assertIn("P5",chord1.intervals)
        self.assertIn("M2",chord1.intervals)
        self.assertIn("m7",chord1.intervals)
        self.assertIn("m3",chord2.intervals)
        self.assertIn("P5",chord2.intervals)
        self.assertIn("M2",chord2.intervals)
        self.assertIn("m7",chord2.intervals)
        self.assertIn("M3",chord3.intervals)
        self.assertIn("P5",chord3.intervals)
        self.assertIn("M2",chord3.intervals)
        self.assertIn("m7",chord3.intervals)
        self.assertIn("M3",chord4.intervals)
        self.assertIn("P5",chord4.intervals)
        self.assertIn("M2",chord4.intervals)
        self.assertIn("M7",chord4.intervals)
        self.assertIn("M3",chord5.intervals)
        self.assertIn("P5",chord5.intervals)
        self.assertIn("M7",chord5.intervals)
        self.assertIn("M2",chord5.intervals)
        self.assertIn("m3",chord6.intervals)
        self.assertIn("P5",chord6.intervals)
        self.assertIn("M7",chord6.intervals)
        self.assertIn("M2",chord6.intervals)
        self.assertNotIn("M7",chord1.intervals)
        self.assertNotIn("M7",chord2.intervals)
        self.assertNotIn("M7",chord3.intervals)
        self.assertNotIn("m7",chord4.intervals)
        self.assertNotIn("m7",chord5.intervals)
        self.assertNotIn("m7",chord6.intervals)

    def test_11_chord(self):
        chord1 = pm.Chord("E11")
        chord2 = pm.Chord("G#m11")
        chord3 = pm.Chord("Ab11")
        chord4 = pm.Chord("Cmaj11")
        chord5 = pm.Chord("Amaj11")
        chord6 = pm.Chord("Ebmin11(maj7)")
        self.assertIn("P4",chord1.intervals)
        self.assertIn("P5",chord1.intervals)
        self.assertIn("M2",chord1.intervals)
        self.assertIn("m7",chord1.intervals)
        self.assertIn("P4",chord2.intervals)
        self.assertIn("P5",chord2.intervals)
        self.assertIn("M2",chord2.intervals)
        self.assertIn("m7",chord2.intervals)
        self.assertIn("P4",chord3.intervals)
        self.assertIn("P5",chord3.intervals)
        self.assertIn("M2",chord3.intervals)
        self.assertIn("m7",chord3.intervals)
        self.assertIn("P4",chord4.intervals)
        self.assertIn("P5",chord4.intervals)
        self.assertIn("M2",chord4.intervals)
        self.assertIn("M7",chord4.intervals)
        self.assertIn("P4",chord5.intervals)
        self.assertIn("P5",chord5.intervals)
        self.assertIn("M7",chord5.intervals)
        self.assertIn("M2",chord5.intervals)
        self.assertIn("P4",chord6.intervals)
        self.assertIn("P5",chord6.intervals)
        self.assertIn("M7",chord6.intervals)
        self.assertIn("M2",chord6.intervals)
        self.assertNotIn("M7",chord1.intervals)
        self.assertNotIn("M7",chord2.intervals)
        self.assertNotIn("M7",chord3.intervals)
        self.assertNotIn("m7",chord4.intervals)
        self.assertNotIn("m7",chord5.intervals)
        self.assertNotIn("m7",chord6.intervals)

    def test_13_chord(self):
        chord1 = pm.Chord("E13")
        chord2 = pm.Chord("G#m13")
        chord3 = pm.Chord("G13(b9)")
        chord4 = pm.Chord("C13(#11)")
        chord5 = pm.Chord("Amaj13")
        chord6 = pm.Chord("Ebmin13(maj7)")
        self.assertIn("M3",chord1.intervals)
        self.assertIn("P5",chord1.intervals)
        self.assertIn("M2",chord1.intervals)
        self.assertIn("m7",chord1.intervals)
        self.assertIn("M6",chord1.intervals)
        self.assertIn("m3",chord2.intervals)
        self.assertIn("P5",chord2.intervals)
        self.assertIn("M2",chord2.intervals)
        self.assertIn("m7",chord2.intervals)
        self.assertIn("M6",chord2.intervals)
        self.assertIn("M3",chord3.intervals)
        self.assertIn("P5",chord3.intervals)
        self.assertIn("m2",chord3.intervals)
        self.assertIn("m7",chord3.intervals)
        self.assertIn("M6",chord3.intervals)
        self.assertIn("M3",chord4.intervals)
        self.assertIn("P5",chord4.intervals)
        self.assertIn("M2",chord4.intervals)
        self.assertIn("m7",chord4.intervals)
        self.assertIn("A4",chord4.intervals)
        self.assertIn("M6",chord4.intervals)
        self.assertIn("M3",chord5.intervals)
        self.assertIn("P5",chord5.intervals)
        self.assertIn("M7",chord5.intervals)
        self.assertIn("M2",chord5.intervals)
        self.assertIn("M6",chord5.intervals)
        self.assertIn("m3",chord6.intervals)
        self.assertIn("P5",chord6.intervals)
        self.assertIn("M7",chord6.intervals)
        self.assertIn("M2",chord6.intervals)
        self.assertIn("P4",chord6.intervals)
        self.assertIn("M6",chord6.intervals)
        self.assertNotIn("M7",chord1.intervals)
        self.assertNotIn("M3",chord2.intervals)
        self.assertNotIn("M2",chord3.intervals)
        self.assertNotIn("P4",chord4.intervals)
        self.assertNotIn("m7",chord5.intervals)
        self.assertNotIn("m7",chord6.intervals)

    def test_flat_9s(self):
        chord1 = pm.Chord("E13(b9)")
        chord2 = pm.Chord("G#(b9)")
        chord3 = pm.Chord("G11(b9)")
        chord4 = pm.Chord("C7b9")
        chord5 = pm.Chord("Amaj13(b9)")
        chord6 = pm.Chord("Ebmin13(maj7)(b9)")
        self.assertIn("M3",chord1.intervals)
        self.assertIn("P5",chord1.intervals)
        self.assertIn("m2",chord1.intervals)
        self.assertIn("m7",chord1.intervals)
        self.assertIn("M6",chord1.intervals)
        self.assertIn("M3",chord2.intervals)
        self.assertIn("P5",chord2.intervals)
        self.assertIn("m2",chord2.intervals)
        self.assertIn("P4",chord3.intervals)
        self.assertIn("P5",chord3.intervals)
        self.assertIn("m2",chord3.intervals)
        self.assertIn("m7",chord3.intervals)
        self.assertIn("M3",chord4.intervals)
        self.assertIn("P5",chord4.intervals)
        self.assertIn("m2",chord4.intervals)
        self.assertIn("m7",chord4.intervals)
        self.assertIn("M3",chord5.intervals)
        self.assertIn("P5",chord5.intervals)
        self.assertIn("M7",chord5.intervals)
        self.assertIn("m2",chord5.intervals)
        self.assertIn("M6",chord5.intervals)
        self.assertIn("m3",chord6.intervals)
        self.assertIn("P5",chord6.intervals)
        self.assertIn("M7",chord6.intervals)
        self.assertIn("m2",chord6.intervals)
        self.assertIn("P4",chord6.intervals)
        self.assertIn("M6",chord6.intervals)
        self.assertNotIn("M7",chord1.intervals)
        self.assertNotIn("M2",chord1.intervals)
        self.assertNotIn("M2",chord2.intervals)
        self.assertNotIn("M2",chord3.intervals)
        self.assertNotIn("M2",chord3.intervals)
        self.assertNotIn("P4",chord4.intervals)
        self.assertNotIn("M2",chord4.intervals)
        self.assertNotIn("m7",chord5.intervals)
        self.assertNotIn("M2",chord5.intervals)
        self.assertNotIn("m7",chord6.intervals)
        self.assertNotIn("M2",chord6.intervals)

    def test_sharp_9s(self):
        chord1 = pm.Chord("E13(#9)")
        chord2 = pm.Chord("G#(#9)")
        chord3 = pm.Chord("G11(#9)")
        chord4 = pm.Chord("C7#9")
        chord5 = pm.Chord("Amaj13(#9)")
        chord6 = pm.Chord("Ebmin13(maj7)(#9)")
        self.assertIn("M3",chord1.intervals)
        self.assertIn("P5",chord1.intervals)
        self.assertIn("A2",chord1.intervals)
        self.assertIn("m7",chord1.intervals)
        self.assertIn("M6",chord1.intervals)
        self.assertIn("M3",chord2.intervals)
        self.assertIn("P5",chord2.intervals)
        self.assertIn("A2",chord2.intervals)
        self.assertIn("P4",chord3.intervals)
        self.assertIn("P5",chord3.intervals)
        self.assertIn("A2",chord3.intervals)
        self.assertIn("m7",chord3.intervals)
        self.assertIn("M3",chord4.intervals)
        self.assertIn("P5",chord4.intervals)
        self.assertIn("A2",chord4.intervals)
        self.assertIn("m7",chord4.intervals)
        self.assertIn("M3",chord5.intervals)
        self.assertIn("P5",chord5.intervals)
        self.assertIn("M7",chord5.intervals)
        self.assertIn("A2",chord5.intervals)
        self.assertIn("M6",chord5.intervals)
        self.assertIn("m3",chord6.intervals)
        self.assertIn("P5",chord6.intervals)
        self.assertIn("M7",chord6.intervals)
        self.assertIn("A2",chord6.intervals)
        self.assertIn("P4",chord6.intervals)
        self.assertIn("M6",chord6.intervals)
        self.assertNotIn("M7",chord1.intervals)
        self.assertNotIn("M2",chord1.intervals)
        self.assertNotIn("M2",chord2.intervals)
        self.assertNotIn("M2",chord3.intervals)
        self.assertNotIn("M2",chord3.intervals)
        self.assertNotIn("P4",chord4.intervals)
        self.assertNotIn("M2",chord4.intervals)
        self.assertNotIn("m7",chord5.intervals)
        self.assertNotIn("M2",chord5.intervals)
        self.assertNotIn("m7",chord6.intervals)
        self.assertNotIn("M2",chord6.intervals)
    
    def test_add_4(self):
        chord1 = pm.Chord("E13(add4)")
        chord2 = pm.Chord("G#(add11)")
        chord3 = pm.Chord("B7add4")
        chord4 = pm.Chord("C7add11")
        chord5 = pm.Chord("Amaj13add4")
        self.assertIn("M3",chord1.intervals)
        self.assertIn("P5",chord1.intervals)
        self.assertIn("M2",chord1.intervals)
        self.assertIn("m7",chord1.intervals)
        self.assertIn("M6",chord1.intervals)
        self.assertIn("P4",chord1.intervals)
        self.assertIn("M3",chord2.intervals)
        self.assertIn("P5",chord2.intervals)
        self.assertIn("P4",chord2.intervals)
        self.assertIn("M3",chord3.intervals)
        self.assertIn("P4",chord3.intervals)
        self.assertIn("P5",chord3.intervals)
        self.assertIn("m7",chord3.intervals)
        self.assertIn("P4",chord1.intervals)
        self.assertIn("M3",chord4.intervals)
        self.assertIn("P5",chord4.intervals)
        self.assertIn("m7",chord4.intervals)
        self.assertIn("P4",chord1.intervals)
        self.assertIn("M3",chord5.intervals)
        self.assertIn("P5",chord5.intervals)
        self.assertIn("M7",chord5.intervals)
        self.assertIn("M2",chord5.intervals)
        self.assertIn("M6",chord5.intervals)
        self.assertIn("P4",chord1.intervals)
        self.assertNotIn("M7",chord1.intervals)
        self.assertNotIn("M2",chord2.intervals)
        self.assertNotIn("M2",chord3.intervals)
        self.assertNotIn("M2",chord3.intervals)
        self.assertNotIn("M2",chord4.intervals)
        self.assertNotIn("m7",chord5.intervals)
    
    def test_sharp_11(self):
        chord1 = pm.Chord("A(#4)")
        chord2 = pm.Chord("F#m(#11)")
        chord3 = pm.Chord("B-(#11)")
        chord4 = pm.Chord("G7#11")
        self.assertIn("M3",chord1.intervals)
        self.assertIn("P5",chord1.intervals)
        self.assertIn("A4",chord1.intervals)
        self.assertIn("m3",chord2.intervals)
        self.assertIn("P5",chord2.intervals)
        self.assertIn("A4",chord2.intervals)
        self.assertIn("m3",chord3.intervals)
        self.assertIn("P5",chord3.intervals)
        self.assertIn("A4",chord3.intervals)
        self.assertIn("M3",chord4.intervals)
        self.assertIn("P5",chord4.intervals)
        self.assertIn("m7",chord4.intervals)
        self.assertIn("A4",chord4.intervals)
        self.assertNotIn("P4",chord1.intervals)
        self.assertNotIn("m7",chord1.intervals)
        self.assertNotIn("P4",chord2.intervals)
        self.assertNotIn("m7",chord2.intervals)
        self.assertNotIn("P4",chord3.intervals)
        self.assertNotIn("m7",chord3.intervals)
        self.assertNotIn("P4",chord4.intervals)

    def test_flat_5(self):
        chord1 = pm.Chord("A(b5)")
        chord2 = pm.Chord("F#m7b5")
        chord3 = pm.Chord("B13(b5)(b9)")
        chord4 = pm.Chord("G7b5")
        self.assertIn("M3",chord1.intervals)
        self.assertIn("D5",chord1.intervals)
        self.assertIn("m3",chord2.intervals)
        self.assertIn("D5",chord2.intervals)
        self.assertIn("m7",chord2.intervals)
        self.assertIn("M3",chord3.intervals)
        self.assertIn("D5",chord3.intervals)
        self.assertIn("m2",chord3.intervals)
        self.assertIn("m7",chord3.intervals)
        self.assertIn("M3",chord4.intervals)
        self.assertIn("m7",chord4.intervals)
        self.assertIn("D5",chord4.intervals)
        self.assertNotIn("P5",chord1.intervals)
        self.assertNotIn("m7",chord1.intervals)
        self.assertNotIn("P5",chord2.intervals)
        self.assertNotIn("M7",chord2.intervals)
        self.assertNotIn("P5",chord3.intervals)
        self.assertNotIn("M2",chord3.intervals)
        self.assertNotIn("P5",chord4.intervals)
    
    def test_sharp_5(self):
        chord1 = pm.Chord("A(#5)")
        chord2 = pm.Chord("F#m7#5")
        chord3 = pm.Chord("B13(#5)(b9)")
        chord4 = pm.Chord("G7#5")
        self.assertIn("M3",chord1.intervals)
        self.assertIn("A5",chord1.intervals)
        self.assertIn("m3",chord2.intervals)
        self.assertIn("A5",chord2.intervals)
        self.assertIn("m7",chord2.intervals)
        self.assertIn("M3",chord3.intervals)
        self.assertIn("A5",chord3.intervals)
        self.assertIn("m2",chord3.intervals)
        self.assertIn("m7",chord3.intervals)
        self.assertIn("M3",chord4.intervals)
        self.assertIn("m7",chord4.intervals)
        self.assertIn("A5",chord4.intervals)
        self.assertNotIn("P5",chord1.intervals)
        self.assertNotIn("m7",chord1.intervals)
        self.assertNotIn("P5",chord2.intervals)
        self.assertNotIn("M7",chord2.intervals)
        self.assertNotIn("P5",chord3.intervals)
        self.assertNotIn("M2",chord3.intervals)
        self.assertNotIn("P5",chord4.intervals)
    
    def test_flat_6(self):
        chord1 = pm.Chord("A(b6)")
        chord2 = pm.Chord("F#m7(b6)")
        chord3 = pm.Chord("B9(b13)")
        chord4 = pm.Chord("G7(#9)(b13)")
        self.assertIn("M3",chord1.intervals)
        self.assertIn("P5",chord1.intervals)
        self.assertIn("m6",chord1.intervals)
        self.assertIn("m3",chord2.intervals)
        self.assertIn("P5",chord2.intervals)
        self.assertIn("m6",chord2.intervals)
        self.assertIn("m7",chord2.intervals)
        self.assertIn("M3",chord3.intervals)
        self.assertIn("P5",chord3.intervals)
        self.assertIn("M2",chord3.intervals)
        self.assertIn("m7",chord3.intervals)
        self.assertIn("m6",chord3.intervals)
        self.assertIn("M3",chord4.intervals)
        self.assertIn("m7",chord4.intervals)
        self.assertIn("A2",chord4.intervals)
        self.assertIn("m6",chord4.intervals)
        self.assertNotIn("M6",chord1.intervals)
        self.assertNotIn("m7",chord1.intervals)
        self.assertNotIn("M6",chord2.intervals)
        self.assertNotIn("M7",chord2.intervals)
        self.assertNotIn("M6",chord3.intervals)
        self.assertNotIn("m2",chord3.intervals)
        self.assertNotIn("M6",chord4.intervals)
        self.assertNotIn("m2",chord4.intervals)
    
    def test_six(self):
        chord1 = pm.Chord("A6")
        chord2 = pm.Chord("F#m(6)")
        chord3 = pm.Chord("Db6/9")
        chord4 = pm.Chord("Gmin(6/9)")
        self.assertIn("M3",chord1.intervals)
        self.assertIn("P5",chord1.intervals)
        self.assertIn("M6",chord1.intervals)
        self.assertIn("m3",chord2.intervals)
        self.assertIn("P5",chord2.intervals)
        self.assertIn("M6",chord2.intervals)
        self.assertIn("M3",chord3.intervals)
        self.assertIn("P5",chord3.intervals)
        self.assertIn("M2",chord3.intervals)
        self.assertIn("M6",chord3.intervals)
        self.assertIn("m3",chord4.intervals)
        self.assertIn("M6",chord4.intervals)
        self.assertIn("M2",chord4.intervals)
        self.assertNotIn("m6",chord1.intervals)
        self.assertNotIn("m7",chord1.intervals)
        self.assertNotIn("m6",chord2.intervals)
        self.assertNotIn("m7",chord2.intervals)
        self.assertNotIn("m7",chord3.intervals)
        self.assertNotIn("m2",chord3.intervals)
        self.assertNotIn("m7",chord4.intervals)
        self.assertNotIn("m6",chord4.intervals)
    
    def test_alt(self):
        chord1 = pm.Chord("A7alt")
        self.assertIn("M3",chord1.intervals)
        self.assertIn("P5",chord1.intervals)
        self.assertIn("m7",chord1.intervals)
        self.assertIn("m2",chord1.intervals)
        self.assertIn("m6",chord1.intervals)

    def test_spelling(self):
        chord1 = pm.Chord("A")
        chord2 = pm.Chord("F#m")
        chord3 = pm.Chord("Db6/9")
        chord4 = pm.Chord("Gmin7")
        chord5 = pm.Chord("Bø")
        chord6 = pm.Chord("Gmin9")
        chord7 = pm.Chord("F9(b13)")
        chord8 = pm.Chord("Fmin(maj7))")

        self.assertEqual(len(chord1),3)
        self.assertEqual(len(chord2),3)
        self.assertEqual(len(chord3),5)
        self.assertEqual(len(chord4),4)
        self.assertEqual(len(chord5),4)
        self.assertEqual(len(chord6),5)
        self.assertEqual(len(chord7),6)
        self.assertEqual(len(chord8),4)

        self.assertEqual(chord1[0].name,"A")
        self.assertEqual(chord1[1].name,"C#")
        self.assertEqual(chord1[2].name,"E")
        self.assertEqual(chord2[0].name,"F#")
        self.assertEqual(chord2[1].name,"A")
        self.assertEqual(chord2[2].name,"C#")
        self.assertEqual(chord3[0].name,"Db")
        self.assertEqual(chord3[1].name,"F")
        self.assertEqual(chord3[2].name,"Ab")
        self.assertEqual(chord4[0].name,"G")
        self.assertEqual(chord4[1].name,"Bb")
        self.assertEqual(chord4[2].name,"D")
        self.assertEqual(chord4[3].name,"F")
        self.assertEqual(chord5[0].name,"B")
        self.assertEqual(chord5[1].name,"D")
        self.assertEqual(chord5[2].name,"F")
        self.assertEqual(chord5[3].name,"A")
        self.assertEqual(chord6[0].name,"G")
        self.assertEqual(chord6[1].name,"Bb")
        self.assertEqual(chord6[2].name,"D")
        self.assertEqual(chord6[3].name,"F")
        self.assertEqual(chord6[4].name,"A")
        self.assertEqual(chord7[0].name,"F")
        self.assertEqual(chord7[1].name,"A")
        self.assertEqual(chord7[2].name,"C")
        self.assertEqual(chord7[3].name,"Eb")
        self.assertEqual(chord7[4].name,"G")
        self.assertEqual(chord7[5].name,"Db")
        self.assertEqual(chord8[0].name,"F")
        self.assertEqual(chord8[1].name,"Ab")
        self.assertEqual(chord8[2].name,"C")
        self.assertEqual(chord8[3].name,"E")

    # def test_triads_from_notes(self):
    #     chord1 = pm.Chord.from_notes("A","C#","E")
    #     chord2 = pm.Chord.from_notes("A","C","E")
    #     chord3 = pm.Chord.from_notes(pm.Note("A"),pm.Note("C#"),pm.Note("E"))
    #     chord4 = pm.Chord.from_notes(pm.Note("G"),pm.Note("Bb"),pm.Note("Db"))
    #     chord5 = pm.Chord.from_notes("Fb","Ab","C")

    #     self.assertEqual(chord1.symbol,"A")
    #     self.assertEqual(chord1.quality,"major")
    #     self.assertEqual(chord2.symbol,"Am")
    #     self.assertEqual(chord2.quality,"minor")
    #     self.assertEqual(chord3.symbol,"A")
    #     self.assertEqual(chord3.quality,"major")
    #     self.assertEqual(chord4.symbol,"G°")
    #     self.assertEqual(chord4.quality,"diminished")
    #     self.assertEqual(chord5.symbol,"Fb+")
    #     self.assertEqual(chord5.quality,"augmented")

class TestModeClass(unittest.TestCase):

    def test_initialization(self):
        pm.TimeSignature(1,1)
        pm.TimeSignature(3,2)
        pm.TimeSignature(4,4)
        pm.TimeSignature(5,8)
        pm.TimeSignature(6,16)
        pm.TimeSignature(8,32)
        pm.TimeSignature(10,64)
        pm.TimeSignature(12,128)
        pm.TimeSignature(8,256)
        pm.TimeSignature(256,512)

        with self.assertRaises(ValueError):
            pm.TimeSignature("1","3")
        with self.assertRaises(ValueError):
            pm.TimeSignature(1,3.5)
        with self.assertRaises(ValueError):
            pm.TimeSignature(0,4)
        with self.assertRaises(ValueError):
            pm.TimeSignature(-1,4)
        with self.assertRaises(ValueError):
            pm.TimeSignature(3,513)

if __name__ == "__main__":

    unittest.main()